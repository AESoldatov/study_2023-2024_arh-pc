%include 'in_out.asm'
SECTION .data
msg db "Результат: ",0
rez dd 1d
SECTION .text
global _start
_start:
pop ecx ; Извлекаем из стека в `ecx` количество
; аргументов (первое значение в стеке)
pop edx ; Извлекаем из стека в `edx` имя программы
; (второе значение в стеке)
sub ecx,1 ; Уменьшаем `ecx` на 1 (количество
; аргументов без названия программы)
next:
cmp ecx,0h ; проверяем, есть ли еще аргументы
jz _end ; если аргументов нет выходим из цикла
; (переход на метку `_end`)
pop eax ; иначе извлекаем следующий аргумент из стека
call atoi ; преобразуем символ в число
mov ebx,[rez]
mul ebx ; eax = eax*[rez]
mov [rez],eax; добавляем к промежуточному произведению [rez]=eax
loop next ; переход к обработке следующего аргумента
_end:
mov eax, msg ; вывод сообщения "Результат: "
call sprint
mov eax, [rez] ; записываем произведение в регистр `eax`
call iprintLF ; печать результата
call quit ; завершение программы

